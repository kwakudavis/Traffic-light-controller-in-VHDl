--------------------------------------------------------------------------------
-- Company: 
-- Engineer:
--
-- Create Date:   09:31:59 10/16/2019
-- Design Name:   
-- Module Name:   Y:/assignment2/assignment2_tb.vhd
-- Project Name:  assignment2
-- Target Device:  
-- Tool versions:  
-- Description:   
-- 
-- VHDL Test Bench Created by ISE for module: trafficLight
-- 
-- Dependencies:
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Notes: 
-- This testbench has been automatically generated using types std_logic and
-- std_logic_vector for the ports of the unit under test.  Xilinx recommends
-- that these types always be used for the top-level I/O of a design in order
-- to guarantee that the testbench will bind correctly to the post-implementation 
-- simulation model.
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY assignment2_tb IS
END assignment2_tb;
 
ARCHITECTURE behavior OF assignment2_tb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT trafficLight
    PORT(
         clk : IN  std_logic;
         reset : IN  std_logic;
         N : IN  std_logic;
         E : IN  std_logic;
    
         R,Y,G : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal clk : std_logic := '0';
   signal reset : std_logic := '0';
   signal N : std_logic := '0';
   signal E : std_logic := '0';

 	--Outputs
   signal R,Y,G : std_logic;

   -- Clock period definitions
   constant clk_period : time := 20 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: trafficLight PORT MAP (
          clk => clk,
          reset => reset,
          N => N,
          E => E,
			
			R=> R,
			Y=> Y,
			G=> G
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
  --    wait for 100 ns;	

  --    wait for clk_period*10;

      -- insert stimulus here 

	

	reset <= '1';
	
	wait for 30 ns;
	      
	reset <= '0';
			
	-- Thus after the state is back to G2--		
	wait for 120 ns;
	
	E <= '1';
			
	wait for 80 ns;

	N <= '1';	
			
   wait;
	
   end process;

END;
